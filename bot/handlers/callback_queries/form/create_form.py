from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from bot.states.states_initialization import FormBuilder
from bot.bot_instance import bot
from bot.keyboards.buttons import create_edit_media_markup, goals_of_form_markup, my_gender_markup, they_gender_markup
from bot.logs.logger import logger
from database.database_code import Database


router = Router()

db = Database()


@router.callback_query(F.data == 'create_form')
async def start_create_form(call: types.CallbackQuery, state: FSMContext):
    try:
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.send_message(call.from_user.id, text='–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
        await state.set_state(FormBuilder.create_form_name)
    except Exception as e:
        logger.error('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: %s', e)
    finally:
        db.add_user(call.from_user.id)


@router.callback_query(F.data.startswith('create_form_add_'))
async def add_media(call: types.CallbackQuery, state: FSMContext):
    try:
        existing_medias = db.get_user_value(call.from_user.id, "profile_media")
        if len(existing_medias.split('|')) < 3:
            media_type = call.data.split('_')[3]
            if media_type == 'photo':
                await bot.edit_message_text(text='–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å:',
                                            chat_id=call.from_user.id,
                                            message_id=call.message.message_id)
            else:
                await bot.edit_message_text(text='–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å:',
                                            chat_id=call.from_user.id,
                                            message_id=call.message.message_id)
            await state.set_state(FormBuilder.create_form_media)
        else:
            await bot.edit_message_text(text='–¢—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞\n'
                                        '–ú–æ–∂–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É',
                                        chat_id=call.from_user.id,
                                        message_id=call.message.message_id,
                                        reply_markup=await create_edit_media_markup(3))
    except Exception as e:
        logger.error('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: %s', e)


@router.callback_query(F.data == 'complete_add_media')
async def complete_add_media(call: types.CallbackQuery):
    try:
        await bot.delete_message(call.from_user.id, call.message.message_id)

        checking = db.get_user_value(call.from_user.id, "profile_media")

        if not bool(checking):
            await bot.send_message(call.from_user.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 1 –º–µ–¥–∏–∞!',
                                   reply_markup=await create_edit_media_markup(1))  # –ù–µ –≤–∞–∂–Ω–æ –∫–∞–∫–æ–µ –∫–æ–ª-–≤–æ —É–∫–∞–∑—ã–≤–∞—Ç—å

        else:
            await bot.send_message(call.from_user.id,
                                   '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ü–µ–ª—å —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.\n'
                                   '–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∞–Ω–∫–µ—Ç—ã:',
                                   reply_markup=goals_of_form_markup)
    except Exception as e:
        logger.error('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: %s', e)


@router.callback_query(F.data.startswith('goal'))
async def get_form_goal(call: types.CallbackQuery, state: FSMContext):
    goals_dict = {
        "love": "üíï–û—Ç–Ω–æ—à–µ–Ω–∏—èüíï",
        "friends": "ü§ù–î—Ä—É–∂–±–∞ü§ù",
        "chatting": "üí¨–û–±—â–µ–Ω–∏–µüí¨",
        "nothing": "ü§∑–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ãü§∑"
    }

    try:
        goal = call.data.split('_')[1]
        goal_in_russian = goals_dict[goal]

        await state.update_data(profile_goal=goal_in_russian)

        await bot.edit_message_text(text='–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:', chat_id=call.from_user.id,
                                    message_id=call.message.message_id,
                                    reply_markup=my_gender_markup)
    except Exception as e:
        logger.error('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: %s', e)


@router.callback_query(F.data.startswith('my_gender'))
async def get_gender(call: types.CallbackQuery, state:FSMContext):
    try:
        gender = call.data.split('_')[-1]
        await state.update_data(self_gender=gender)
        await bot.edit_message_text(text='–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –ø–æ–ª —Ç–æ–≥–æ, –∫–æ–≥–æ —Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å:',
                                    chat_id=call.from_user.id,
                                    message_id=call.message.message_id,
                                    reply_markup=they_gender_markup)
    except Exception as e:
        logger.error('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: %s', e)
        await state.clear()


@router.callback_query(F.data.startswith('they_gender'))
async def get_they_gender(call: types.CallbackQuery, state: FSMContext):
    try:
        gender = call.data.split('_')[-1]
        if gender == 'any':
            gender = 'male female'

        await state.update_data(find_gender=gender)

        await bot.edit_message_text(
            text='–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!\n–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏–º —Ç–µ–∫—Å—Ç –≤ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É\n'
            '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, –æ–ø–∏—à–∏ —Ç–æ, —á–µ–º –ª—é–±–∏—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è',
            chat_id=call.from_user.id, message_id=call.message.message_id)

        await state.set_state(FormBuilder.create_form_profile_text)
    except Exception as e:
        logger.error('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: %s', e)
        await state.clear()
