from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from bot.bot_instance import bot
from bot.keyboards.buttons import create_edit_media_markup, geolocation_markup, form_settings_markup
from bot.states.states_initialization import FormBuilder
from bot.utils.send_form_utils.send_form import send_form
from database.database_code import Database
from bot.logs.logger import logger


router = Router()


db = Database()


@router.message(FormBuilder.create_form_name)
async def create_form_step_1(message: types.Message, state: FSMContext):
    try:
        await state.update_data(name=message.text)
        await bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
        await state.set_state(FormBuilder.create_form_age)
    except Exception as e:
        logger.error('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: %s', e)


@router.message(FormBuilder.create_form_age)
async def create_form_step_2(message: types.Message, state: FSMContext):
    try:
        if message.text.isdigit():
            state_data = await state.get_data()
            name = state_data["name"]

            db.set_user_value(user_id=message.chat.id, name=name, age=message.text)

            await bot.send_message(message.chat.id,
                                   '–£ —Ç–µ–±—è –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç‚ô•Ô∏è\n–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å –≤ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ\n'
                                   'üóÇ–°–µ–π—á–∞—Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ 0/3 —Ñ–æ—Ç–æ', reply_markup=await create_edit_media_markup(1))
            await state.clear()
        else:
            await bot.send_message(message.chat.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç!')
    except Exception as e:
        logger.error('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: %s', e)


@router.message(FormBuilder.create_form_media)
async def get_media_for_form(message: types.Message, state: FSMContext):
    try:
        await bot.delete_message(message.chat.id, message.message_id - 1)

        current_file_ids = db.get_user_value(message.chat.id, 'profile_media')

        if message.photo:
            file_id = message.photo[-1].file_id
        elif message.video:
            file_id = message.video.file_id
        else:
            await bot.send_message(chat_id=message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!')
            return

        if not bool(current_file_ids):
            current_file_ids += file_id
        else:
            current_file_ids += '|' + file_id
        db.set_user_value(user_id=message.chat.id, profile_media=current_file_ids)

        media_count = len(current_file_ids.split('|'))
        await bot.send_message(message.chat.id, f'–ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ\nüóÇ–°–µ–π—á–∞—Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ {media_count}/3 —Ñ–æ—Ç–æ',
                               reply_markup=await create_edit_media_markup(media_count))
        await state.clear()
    except Exception as e:
        logger.error('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: %s', e)


@router.message(FormBuilder.create_form_profile_text)
async def create_form_step_4(message: types.Message, state: FSMContext):
    try:
        await state.update_data(profile_text=message.text)
        await bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:')
        await state.set_state(FormBuilder.create_form_city)
    except Exception as e:
        logger.error('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: %s', e)


@router.message(FormBuilder.create_form_city)
async def create_form_step_5(message: types.Message, state: FSMContext):
    try:
        await state.update_data(city=message.text.lower().capitalize())
        await bot.send_message(message.chat.id,
                               '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—éüìç\n'
                               '–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –ª—é–¥–µ–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏',
                               reply_markup=geolocation_markup)
        await state.set_state(FormBuilder.create_form_geolocation)
    except Exception as e:
        logger.error('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: %s', e)


@router.message(FormBuilder.create_form_geolocation)
async def create_form_step_6(message: types.Message, state: FSMContext):
    try:
        await bot.delete_message(message.chat.id, message.message_id - 1)
        await bot.delete_message(message.chat.id, message.message_id)
        if message.content_type == 'location':
            latitude = message.location.latitude
            longitude = message.location.longitude
            form_geolocation = str(latitude) + '|' + str(longitude)
        else:
            form_geolocation = ""

        state_data = await state.get_data()

        form_goal = state_data["profile_goal"]
        form_self_gender = state_data["self_gender"]
        form_they_gender = state_data["find_gender"]
        form_text = state_data["profile_text"]
        form_city = state_data["city"]

        db.set_user_value(user_id=message.chat.id, profile_goal=form_goal, self_gender=form_self_gender,
                          find_gender=form_they_gender, profile_text=form_text, city=form_city,
                          geolocation=form_geolocation)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∫–µ—Ç—ã

        await bot.send_message(message.chat.id, '‚úÖ')

        await send_form(user_id=message.chat.id, other_form_flag=False)
        await bot.send_message(message.chat.id, '–í—Å—ë –≤–µ—Ä–Ω–æ?', reply_markup=form_settings_markup)
    except Exception as e:
        logger.error('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: %s', e)
    finally:
        await state.clear()
